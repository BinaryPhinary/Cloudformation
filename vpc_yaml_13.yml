AWSTemplateFormatVersion: '2010-09-09'


Parameters:
  
  
  EnvironmentName:
    Type: String
    Description: An environment name that is prefixed to resource names
    Default: mb-eye-14

  EKSClusterName:
    Type: String
    Description: EKS Cluster name
    Default: mb-eye-prod-5
    
  HomeIp: 
    Type: String
    Description: my changing ip
    
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.0.1.0/26
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 10.0.3.0/26
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 10.0.2.0/26
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 10.0.4.0/26
    Description: CidrBlock for private subnet 01 within the VPC
  
  InternalSSHKey:
    Type: String
    Default: mb-eye-ssh-internal
    Description: SSH key for internal servers - will need manual copy for the priv key to JB

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${EnvironmentName}-VPC'
  
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-PublicSubnet01"
    
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-PublicSubnet02"

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-PrivateSubnet01"

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-PrivateSubnet02"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

#  NatGateway2EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc
    
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet01

#  NatGateway2:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway2EIP.AllocationId
#      SubnetId: !Ref PublicSubnet02

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
   
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet02

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet01

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet02

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

#// Network ACL's

  EKSPubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: Pub-mb-eye-ACL
      VpcId: !Ref VPC

  EKSPrivNACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: Priv-mb-eye-ACL
      VpcId: !Ref VPC

  EKSPrivNACLInbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 10.0.0.0/16
      Egress: false
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: -1
        To: -1
      Protocol: -1
      RuleAction: allow
      RuleNumber: 300
  
  EKSPrivNACLInbound2:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  EKSPrivNACLInbound3:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 101

  EKSPrivNACLInbound4:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 53
        To: 53
      Protocol: 6
      RuleAction: allow
      RuleNumber: 102

  EKSPrivNACLInbound5:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 53
        To: 53
      Protocol: 17
      RuleAction: allow
      RuleNumber: 103
  
  EKSPrivNACLInbound6:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 104
  
  EKSPrivNACLOutbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 10.0.0.0/16
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: -1
        To: -1
      Protocol: -1
      RuleAction: allow
      RuleNumber: 300
  
  EKSPrivNACLOutbound2:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 101
  
  EKSPrivNACLOutbound3:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 102

  EKSPrivNACLOutbound4:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 53
        To: 53
      Protocol: 6
      RuleAction: allow
      RuleNumber: 103

  EKSPrivNACLOutbound5:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 53
        To: 53
      Protocol: 17
      RuleAction: allow
      RuleNumber: 104

  EKSPrivNACLOutbound6:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 105

  EKSPrivNACLOutbound7:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPrivNACL
      PortRange: 
        From: 8080
        To: 8080
      Protocol: 6
      RuleAction: allow
      RuleNumber: 106

  EKSPubNACLInbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 10.0.0.0/16
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: -1
        To: -1
      Protocol: -1
      RuleAction: allow
      RuleNumber: 300

  EKSPubNACLInbound2:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  EKSPubNACLInbound3:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 101

  EKSPubNACLInbound4:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 102

  EKSPubNACLInbound5:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: 53
        To: 53
      Protocol: 6
      RuleAction: allow
      RuleNumber: 103

  EKSPubNACLInbound6:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: 53
        To: 53
      Protocol: 17
      RuleAction: allow
      RuleNumber: 104

  EKSPubNACLInbound7:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 105

  EKSPubNACLOutbound1:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: -1
        To: -1
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  EKSPubNACLOutbound2:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 10.0.0.0/16
      Egress: true
      NetworkAclId: !Ref EKSPubNACL
      PortRange: 
        From: -1
        To: -1
      Protocol: -1
      RuleAction: allow
      RuleNumber: 300

  #EKSPubNACLOutbound2:
  #  Type: AWS::EC2::NetworkAclEntry
  #  Properties: 
  #    CidrBlock: 0.0.0.0/0
  #    Egress: true
  #    NetworkAclId: !Ref EKSPubNACL
  #    PortRange: 
  #      From: 10250
  #      To: 10250
  #    Protocol: 6
  #    RuleAction: allow
  #    RuleNumber: 101

  #EKSPubNACLOutbound3:
  #  Type: AWS::EC2::NetworkAclEntry
  #  Properties: 
  #    CidrBlock: 0.0.0.0/0
  #    Egress: true
  #    NetworkAclId: !Ref EKSPubNACL
  #    PortRange: 
  #      From: 53
  #      To: 53
  #    Protocol: 6
  #    RuleAction: allow
  #    RuleNumber: 102

  #EKSPubNACLOutbound4:
  #  Type: AWS::EC2::NetworkAclEntry
  #  Properties: 
  #    CidrBlock: 0.0.0.0/0
  #    Egress: true
  #    NetworkAclId: !Ref EKSPubNACL
  #    PortRange: 
  #     From: 53
  #     To: 53
  #    Protocol: 17
  #    RuleAction: allow
  #    RuleNumber: 103

  #EKSPubNACLOutbound5:
  #  Type: AWS::EC2::NetworkAclEntry
  #  Properties: 
  #    CidrBlock: 0.0.0.0/0
  #    Egress: true
  #    NetworkAclId: !Ref EKSPubNACL
  #    PortRange: 
  #      From: 80
  #      To: 80
  #    Protocol: 6
  #    RuleAction: allow
  #    RuleNumber: 104

  EKSPubNACLSubnetAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref EKSPubNACL
      SubnetId: !Ref PublicSubnet01
  
  EKSPubNACLSubnetAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref EKSPubNACL
      SubnetId: !Ref PublicSubnet02

  EKSPrivNACLSubnetAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref EKSPrivNACL
      SubnetId: !Ref PrivateSubnet01
  
  EKSPrivNACLSubnetAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref EKSPrivNACL
      SubnetId: !Ref PrivateSubnet02

#//Security Group Names
  PubInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: JumpBox Instance Security Group
      VpcId:
        Ref: VPC
  
  PrivInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private Servers Security Group
      VpcId:
        Ref: VPC
  
  EKSNodeGroupSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS/Kubernetes Security Group
      VpcId:
        Ref: VPC
  
  LBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId:
        Ref: VPC

#//Public Subnet Security Groups

  PubServerSecGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PubInstanceSG
      CidrIp: 10.0.0.0/16
      IpProtocol: -1

  PubServerSecGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PubInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: -1
    
  PubServerSecGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PubInstanceSG
      CidrIp: !Ref HomeIp
      IpProtocol: TCP
      FromPort: 22
      ToPort: 22
      
  
#///Private Instances Subnet Security Groups

  PrivServerSecGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 10.0.0.0/16
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
  
  PrivServerSecGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 443
      ToPort: 443

  PrivServerSecGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80

  PrivServerSecGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 8080
      ToPort: 8080    

  PrivServerSecGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 10.0.0.0/16
      IpProtocol: -1
      FromPort: -1
      ToPort: -1

  PrivServerSecGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80

  PrivServerSecGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 8080
      ToPort: 8080

  PrivServerSecGroupEgress4:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PrivInstanceSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 443
      ToPort: 443

#//EKS Security Groups

  EKSNodeGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 10.0.0.0/16
      IpProtocol: -1
      FromPort: -1
      ToPort: -1

  EKSNodeGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 0.0.0.0/0
      IpProtocol: -1
      FromPort: -1
      ToPort: -1

  #EKSNodeGroupEgress3:
  #  Type: AWS::EC2::SecurityGroupEgress
  #  Properties:
  #    GroupId: !Ref EKSNodeGroupSG
  #    CidrIp: 0.0.0.0/0
  #    IpProtocol: TCP
  #    FromPort: 1024
  #    ToPort: 65535

  #EKSNodeGroupEgress4:
  #  Type: AWS::EC2::SecurityGroupEgress
  #  Properties:
  #    GroupId: !Ref EKSNodeGroupSG
  #    CidrIp: 0.0.0.0/0
  #    IpProtocol: TCP
  #    FromPort: 53
  #    ToPort: 53

  #EKSNodeGroupEgress5:
  #  Type: AWS::EC2::SecurityGroupEgress
  #  Properties:
  #    GroupId: !Ref EKSNodeGroupSG
  #    CidrIp: 0.0.0.0/0
  #    IpProtocol: UDP
  #    FromPort: 53
  #    ToPort: 53

  #EKSNodeGroupEgress6:
  #  Type: AWS::EC2::SecurityGroupEgress
  #  Properties:
  #    GroupId: !Ref EKSNodeGroupSG
  #    CidrIp: 0.0.0.0/0
  #    IpProtocol: TCP
  #    FromPort: 80
  #    ToPort: 80
    
  EKSNodeGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 443
      ToPort: 443

  EKSNodeGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 1024
      ToPort: 65535

  EKSNodeGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80

  EKSNodeGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 53
      ToPort: 53

  EKSNodeGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 0.0.0.0/0
      IpProtocol: UDP
      FromPort: 53
      ToPort: 53
  
  EKSNodeGroupIngress6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EKSNodeGroupSG
      CidrIp: 10.0.0.0/16
      IpProtocol: -1
      FromPort: -1
      ToPort: -1

  #//ELB Security Group
  
  LBGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LBSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80

  LBGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LBSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80
  
  LBGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LBSG
      CidrIp: 0.0.0.0/0
      IpProtocol: TCP
      FromPort: 8080
      ToPort: 8080

#//Load Balancer

  ELBTargetGroup:
   Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
   DependsOn: JenkinsEC2Instance
   Properties:
     HealthCheckIntervalSeconds: 6
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     Port: 80
     Protocol: HTTP
     UnhealthyThresholdCount: 2
     VpcId: !Ref VPC
     TargetType: instance
     Targets: 
       - Id: !Ref JenkinsEC2Instance
         Port: 8080

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: JenkinsEC2Instance
    Properties:
      Name: mb-eye-jenkins-lb
      Subnets: 
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups: 
        - !Ref LBSG
  
  ElbListener:
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   DependsOn: JenkinsEC2Instance
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref ELBTargetGroup
     LoadBalancerArn: !Ref ElasticLoadBalancer
     Port: '80'
     Protocol: HTTP

#//Instances
#//Add Amazon EC2ECR Role to this instance
  JenkinsEC2Instance:
      Type: AWS::EC2::Instance
      Properties: 
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        BlockDeviceMappings:
          - DeviceName: /dev/xvdf
            Ebs:
              VolumeSize: 20
        ImageId: ami-05fa00d4c63e32376
        InstanceType: t2.micro
        KeyName: !Ref InternalSSHKey
        SecurityGroupIds: 
          - !Ref PrivInstanceSG
        SubnetId: !Ref PrivateSubnet01
        Tags: 
        - Key: Name
          Value: Jenkins-Instance
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              sleep 3m
              sudo yum install -y java-1.8.0-openjdk-devel
              curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
              sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
              sudo yum install -y jenkins
      DependsOn: PrivateSubnet01

  JumpBoxECEInstance:
      Type: AWS::EC2::Instance
      Properties: 
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        BlockDeviceMappings:
          - DeviceName: /dev/xvdf
            Ebs:
              VolumeSize: 20
        ImageId: ami-05fa00d4c63e32376
        InstanceType: t2.micro
        KeyName: mobile-eye-1-vpc-kp
        SecurityGroupIds: 
          - !Ref PubInstanceSG
        SubnetId: !Ref PublicSubnet01
        Tags: 
        - Key: Name
          Value: JumpBox
      DependsOn: PublicSubnet01
  
  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn:
      - EKSPubNACL
      - EKSPrivNACL
    Properties:
      Name: !Ref EKSClusterName
      Version: "1.22"
      RoleArn: "arn:aws:iam::633706706076:role/mbeye-eksClusterRole"
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSNodeGroupSG
        SubnetIds:
          - !Ref PrivateSubnet01
          - !Ref PrivateSubnet02
        EndpointPublicAccess: false
        EndpointPrivateAccess: true
      Logging:
         ClusterLogging:
           EnabledTypes:
             - Type: api
             - Type: audit

  EKSNodegroup:
    Type: AWS::EKS::Nodegroup
    Properties: 
      ClusterName: !Ref EKSClusterName
      DiskSize: 20
      NodegroupName: mb3
      NodeRole: arn:aws:iam::633706706076:role/mb-eye-1-worker-node-policy
      RemoteAccess:
        Ec2SshKey: !Ref InternalSSHKey
      ScalingConfig: 
        MinSize: 2
        DesiredSize: 2
        MaxSize: 2
      Subnets: 
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      Tags:
          Key: "kubernetes.io/cluster/mb-eye-prod-5"
          Value: "owned"
    DependsOn:
      - EKSCluster
      - EKSPubNACL
      - EKSPrivNACL

#// ECR Repository

  ECRRepo: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "mb-eye-repo"
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              AWS: 
                - "arn:aws:iam::633706706076:user/main_admin"
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

#  PrivateSubnet2RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      SubnetId: !Ref PrivateSubnet02
